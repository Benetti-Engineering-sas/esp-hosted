/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: esp_hosted_config.proto */

#ifndef PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CmdGetStatus CmdGetStatus;
typedef struct _RespGetStatus RespGetStatus;
typedef struct _CmdConfig CmdConfig;
typedef struct _RespConfig RespConfig;
typedef struct _ScanResult ScanResult;
typedef struct _CmdScanResult CmdScanResult;
typedef struct _RespScanResult RespScanResult;
typedef struct _ConnectedSTAList ConnectedSTAList;
typedef struct _CmdConnectedSTA CmdConnectedSTA;
typedef struct _RespConnectedSTA RespConnectedSTA;
typedef struct _EspHostedConfigPayload EspHostedConfigPayload;


/* --- enums --- */

typedef enum _EncryptionMode {
  ENCRYPTION_MODE__Type_Open = 0,
  ENCRYPTION_MODE__Type_WEP = 1,
  ENCRYPTION_MODE__Type_WPA_PSK = 2,
  ENCRYPTION_MODE__Type_WPA2_PSK = 3,
  ENCRYPTION_MODE__Type_WPA_WPA2_PSK = 4,
  ENCRYPTION_MODE__Type_WPA2_ENTERPRISE = 5,
  ENCRYPTION_MODE__Type_WPA3_PSK = 6,
  ENCRYPTION_MODE__Type_WPA2_WPA3_PSK = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENCRYPTION_MODE)
} EncryptionMode;
typedef enum _EspHostedConfigMsgType {
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetMACAddress = 0,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetMACAddress = 1,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetWiFiMode = 2,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetWiFiMode = 3,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetWiFiMode = 4,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetWiFiMode = 5,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetAPConfig = 6,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetAPConfig = 7,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetAPConfig = 8,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetAPConfig = 9,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetSoftAPConfig = 10,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetSoftAPConfig = 11,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdSetSoftAPConfig = 12,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespSetSoftAPConfig = 13,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdDisconnectAP = 14,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespDisconnectAP = 15,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetAPScanList = 16,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetAPScanList = 17,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeCmdGetConnectedSTAList = 18,
  ESP_HOSTED_CONFIG_MSG_TYPE__TypeRespGetConnectedSTAList = 19
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESP_HOSTED_CONFIG_MSG_TYPE)
} EspHostedConfigMsgType;

/* --- messages --- */

struct  _CmdGetStatus
{
  ProtobufCMessage base;
  char *cmd;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define CMD_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_get_status__descriptor) \
    , NULL, 0,0 }


struct  _RespGetStatus
{
  ProtobufCMessage base;
  char *resp;
  protobuf_c_boolean has_mode;
  int32_t mode;
};
#define RESP_GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_get_status__descriptor) \
    , NULL, 0,0 }


struct  _CmdConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  protobuf_c_boolean has_ecn;
  EncryptionMode ecn;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  char *bssid;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  char *status;
  protobuf_c_boolean has_bw;
  int32_t bw;
  protobuf_c_boolean has_is_wpa3_supported;
  protobuf_c_boolean is_wpa3_supported;
};
#define CMD_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_config__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0 }


struct  _RespConfig
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  protobuf_c_boolean has_ecn;
  EncryptionMode ecn;
  protobuf_c_boolean has_chnl;
  int32_t chnl;
  protobuf_c_boolean has_max_conn;
  int32_t max_conn;
  protobuf_c_boolean has_ssid_hidden;
  protobuf_c_boolean ssid_hidden;
  char *bssid;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  char *status;
  protobuf_c_boolean has_bw;
  int32_t bw;
  protobuf_c_boolean has_is_wpa3_supported;
  protobuf_c_boolean is_wpa3_supported;
};
#define RESP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_config__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0 }


struct  _ScanResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ssid;
  ProtobufCBinaryData ssid;
  protobuf_c_boolean has_chnl;
  uint32_t chnl;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
  protobuf_c_boolean has_bssid;
  ProtobufCBinaryData bssid;
  protobuf_c_boolean has_ecn;
  EncryptionMode ecn;
};
#define SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scan_result__descriptor) \
    , 0,{0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,0 }


struct  _CmdScanResult
{
  ProtobufCMessage base;
};
#define CMD_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_scan_result__descriptor) \
     }


struct  _RespScanResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_count;
  uint32_t count;
  size_t n_entries;
  ScanResult **entries;
};
#define RESP_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_scan_result__descriptor) \
    , 0,0, 0,NULL }


struct  _ConnectedSTAList
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
  protobuf_c_boolean has_rssi;
  int32_t rssi;
};
#define CONNECTED_STALIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connected_stalist__descriptor) \
    , 0,{0,NULL}, 0,0 }


struct  _CmdConnectedSTA
{
  ProtobufCMessage base;
};
#define CMD_CONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_connected_sta__descriptor) \
     }


struct  _RespConnectedSTA
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num;
  uint32_t num;
  size_t n_stations;
  ConnectedSTAList **stations;
};
#define RESP_CONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_connected_sta__descriptor) \
    , 0,0, 0,NULL }


typedef enum {
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD__NOT_SET = 0,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_MAC_ADDRESS = 10,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_MAC_ADDRESS = 11,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_WIFI_MODE = 12,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_WIFI_MODE = 13,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_WIFI_MODE = 14,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_WIFI_MODE = 15,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_AP_CONFIG = 16,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_AP_CONFIG = 17,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_AP_CONFIG = 18,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_AP_CONFIG = 19,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_GET_SOFTAP_CONFIG = 20,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_GET_SOFTAP_CONFIG = 21,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SET_SOFTAP_CONFIG = 22,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_SOFTAP_CONFIG = 23,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_DISCONNECT_AP = 24,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_DISCONNECT_AP = 25,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_SCAN_AP_LIST = 26,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_SCAN_AP_LIST = 27,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_CMD_CONNECTED_STAS_LIST = 28,
  ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD_RESP_CONNECTED_STAS_LIST = 29,
} EspHostedConfigPayload__PayloadCase;

struct  _EspHostedConfigPayload
{
  ProtobufCMessage base;
  protobuf_c_boolean has_msg;
  EspHostedConfigMsgType msg;
  EspHostedConfigPayload__PayloadCase payload_case;
  union {
    CmdGetStatus *cmd_get_mac_address;
    RespGetStatus *resp_get_mac_address;
    CmdGetStatus *cmd_get_wifi_mode;
    RespGetStatus *resp_get_wifi_mode;
    CmdGetStatus *cmd_set_wifi_mode;
    RespGetStatus *resp_set_wifi_mode;
    CmdConfig *cmd_get_ap_config;
    RespConfig *resp_get_ap_config;
    CmdConfig *cmd_set_ap_config;
    RespConfig *resp_set_ap_config;
    CmdConfig *cmd_get_softap_config;
    RespConfig *resp_get_softap_config;
    CmdConfig *cmd_set_softap_config;
    RespConfig *resp_set_softap_config;
    CmdGetStatus *cmd_disconnect_ap;
    RespGetStatus *resp_disconnect_ap;
    CmdScanResult *cmd_scan_ap_list;
    RespScanResult *resp_scan_ap_list;
    CmdConnectedSTA *cmd_connected_stas_list;
    RespConnectedSTA *resp_connected_stas_list;
  };
};
#define ESP_HOSTED_CONFIG_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&esp_hosted_config_payload__descriptor) \
    , 0,0, ESP_HOSTED_CONFIG_PAYLOAD__PAYLOAD__NOT_SET, {0} }


/* CmdGetStatus methods */
void   cmd_get_status__init
                     (CmdGetStatus         *message);
size_t cmd_get_status__get_packed_size
                     (const CmdGetStatus   *message);
size_t cmd_get_status__pack
                     (const CmdGetStatus   *message,
                      uint8_t             *out);
size_t cmd_get_status__pack_to_buffer
                     (const CmdGetStatus   *message,
                      ProtobufCBuffer     *buffer);
CmdGetStatus *
       cmd_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_get_status__free_unpacked
                     (CmdGetStatus *message,
                      ProtobufCAllocator *allocator);
/* RespGetStatus methods */
void   resp_get_status__init
                     (RespGetStatus         *message);
size_t resp_get_status__get_packed_size
                     (const RespGetStatus   *message);
size_t resp_get_status__pack
                     (const RespGetStatus   *message,
                      uint8_t             *out);
size_t resp_get_status__pack_to_buffer
                     (const RespGetStatus   *message,
                      ProtobufCBuffer     *buffer);
RespGetStatus *
       resp_get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_get_status__free_unpacked
                     (RespGetStatus *message,
                      ProtobufCAllocator *allocator);
/* CmdConfig methods */
void   cmd_config__init
                     (CmdConfig         *message);
size_t cmd_config__get_packed_size
                     (const CmdConfig   *message);
size_t cmd_config__pack
                     (const CmdConfig   *message,
                      uint8_t             *out);
size_t cmd_config__pack_to_buffer
                     (const CmdConfig   *message,
                      ProtobufCBuffer     *buffer);
CmdConfig *
       cmd_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_config__free_unpacked
                     (CmdConfig *message,
                      ProtobufCAllocator *allocator);
/* RespConfig methods */
void   resp_config__init
                     (RespConfig         *message);
size_t resp_config__get_packed_size
                     (const RespConfig   *message);
size_t resp_config__pack
                     (const RespConfig   *message,
                      uint8_t             *out);
size_t resp_config__pack_to_buffer
                     (const RespConfig   *message,
                      ProtobufCBuffer     *buffer);
RespConfig *
       resp_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_config__free_unpacked
                     (RespConfig *message,
                      ProtobufCAllocator *allocator);
/* ScanResult methods */
void   scan_result__init
                     (ScanResult         *message);
size_t scan_result__get_packed_size
                     (const ScanResult   *message);
size_t scan_result__pack
                     (const ScanResult   *message,
                      uint8_t             *out);
size_t scan_result__pack_to_buffer
                     (const ScanResult   *message,
                      ProtobufCBuffer     *buffer);
ScanResult *
       scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scan_result__free_unpacked
                     (ScanResult *message,
                      ProtobufCAllocator *allocator);
/* CmdScanResult methods */
void   cmd_scan_result__init
                     (CmdScanResult         *message);
size_t cmd_scan_result__get_packed_size
                     (const CmdScanResult   *message);
size_t cmd_scan_result__pack
                     (const CmdScanResult   *message,
                      uint8_t             *out);
size_t cmd_scan_result__pack_to_buffer
                     (const CmdScanResult   *message,
                      ProtobufCBuffer     *buffer);
CmdScanResult *
       cmd_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_scan_result__free_unpacked
                     (CmdScanResult *message,
                      ProtobufCAllocator *allocator);
/* RespScanResult methods */
void   resp_scan_result__init
                     (RespScanResult         *message);
size_t resp_scan_result__get_packed_size
                     (const RespScanResult   *message);
size_t resp_scan_result__pack
                     (const RespScanResult   *message,
                      uint8_t             *out);
size_t resp_scan_result__pack_to_buffer
                     (const RespScanResult   *message,
                      ProtobufCBuffer     *buffer);
RespScanResult *
       resp_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_scan_result__free_unpacked
                     (RespScanResult *message,
                      ProtobufCAllocator *allocator);
/* ConnectedSTAList methods */
void   connected_stalist__init
                     (ConnectedSTAList         *message);
size_t connected_stalist__get_packed_size
                     (const ConnectedSTAList   *message);
size_t connected_stalist__pack
                     (const ConnectedSTAList   *message,
                      uint8_t             *out);
size_t connected_stalist__pack_to_buffer
                     (const ConnectedSTAList   *message,
                      ProtobufCBuffer     *buffer);
ConnectedSTAList *
       connected_stalist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connected_stalist__free_unpacked
                     (ConnectedSTAList *message,
                      ProtobufCAllocator *allocator);
/* CmdConnectedSTA methods */
void   cmd_connected_sta__init
                     (CmdConnectedSTA         *message);
size_t cmd_connected_sta__get_packed_size
                     (const CmdConnectedSTA   *message);
size_t cmd_connected_sta__pack
                     (const CmdConnectedSTA   *message,
                      uint8_t             *out);
size_t cmd_connected_sta__pack_to_buffer
                     (const CmdConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
CmdConnectedSTA *
       cmd_connected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_connected_sta__free_unpacked
                     (CmdConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* RespConnectedSTA methods */
void   resp_connected_sta__init
                     (RespConnectedSTA         *message);
size_t resp_connected_sta__get_packed_size
                     (const RespConnectedSTA   *message);
size_t resp_connected_sta__pack
                     (const RespConnectedSTA   *message,
                      uint8_t             *out);
size_t resp_connected_sta__pack_to_buffer
                     (const RespConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
RespConnectedSTA *
       resp_connected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_connected_sta__free_unpacked
                     (RespConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* EspHostedConfigPayload methods */
void   esp_hosted_config_payload__init
                     (EspHostedConfigPayload         *message);
size_t esp_hosted_config_payload__get_packed_size
                     (const EspHostedConfigPayload   *message);
size_t esp_hosted_config_payload__pack
                     (const EspHostedConfigPayload   *message,
                      uint8_t             *out);
size_t esp_hosted_config_payload__pack_to_buffer
                     (const EspHostedConfigPayload   *message,
                      ProtobufCBuffer     *buffer);
EspHostedConfigPayload *
       esp_hosted_config_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   esp_hosted_config_payload__free_unpacked
                     (EspHostedConfigPayload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CmdGetStatus_Closure)
                 (const CmdGetStatus *message,
                  void *closure_data);
typedef void (*RespGetStatus_Closure)
                 (const RespGetStatus *message,
                  void *closure_data);
typedef void (*CmdConfig_Closure)
                 (const CmdConfig *message,
                  void *closure_data);
typedef void (*RespConfig_Closure)
                 (const RespConfig *message,
                  void *closure_data);
typedef void (*ScanResult_Closure)
                 (const ScanResult *message,
                  void *closure_data);
typedef void (*CmdScanResult_Closure)
                 (const CmdScanResult *message,
                  void *closure_data);
typedef void (*RespScanResult_Closure)
                 (const RespScanResult *message,
                  void *closure_data);
typedef void (*ConnectedSTAList_Closure)
                 (const ConnectedSTAList *message,
                  void *closure_data);
typedef void (*CmdConnectedSTA_Closure)
                 (const CmdConnectedSTA *message,
                  void *closure_data);
typedef void (*RespConnectedSTA_Closure)
                 (const RespConnectedSTA *message,
                  void *closure_data);
typedef void (*EspHostedConfigPayload_Closure)
                 (const EspHostedConfigPayload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    encryption_mode__descriptor;
extern const ProtobufCEnumDescriptor    esp_hosted_config_msg_type__descriptor;
extern const ProtobufCMessageDescriptor cmd_get_status__descriptor;
extern const ProtobufCMessageDescriptor resp_get_status__descriptor;
extern const ProtobufCMessageDescriptor cmd_config__descriptor;
extern const ProtobufCMessageDescriptor resp_config__descriptor;
extern const ProtobufCMessageDescriptor scan_result__descriptor;
extern const ProtobufCMessageDescriptor cmd_scan_result__descriptor;
extern const ProtobufCMessageDescriptor resp_scan_result__descriptor;
extern const ProtobufCMessageDescriptor connected_stalist__descriptor;
extern const ProtobufCMessageDescriptor cmd_connected_sta__descriptor;
extern const ProtobufCMessageDescriptor resp_connected_sta__descriptor;
extern const ProtobufCMessageDescriptor esp_hosted_config_payload__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED */
